name: 'Push Dockerised Application to ECR'

on:
  push: #TODO remove
  workflow_call:
    inputs:
      environment:
        required: true
        type: string

# TODO update environment

# Required to use Github OIDC Token with AWS
permissions:
  id-token: write

env:
  AWS_REGION: eu-west-1

jobs:
  run-automated-tests:
    name: 'Run Automated Tests'
    environment: development
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Run Automated Tests
        run: ./mvnw verify

  push-to-ecr:
    name: 'Push Dockerised Application to ECR'
    needs: run-automated-tests
    environment: development
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set Environment Variables
        run: |
          case ${{ inputs.environment }} in
            development)  echo "AWS_ACCOUNT_ID=${{ secrets[DEV_AWS_ACCOUNT_ID] }}" >> $GITHUB_ENV;;
            staging)      echo "AWS_ACCOUNT_ID=${{ secrets[STAGE_AWS_ACCOUNT_ID] }}" >> $GITHUB_ENV;;
            production)   echo "AWS_ACCOUNT_ID=${{ secrets[PROD_AWS_ACCOUNT_ID] }}" >> $GITHUB_ENV;;
            *)            echo "${{ inputs.environment }} is an unrecognised environment"; exit 1;;
          esac

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/RoleForGithubActions
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Create Image Tag
        id: create-image-tag
        run: |
          IMAGE_TAG=$(date +%Y%m%d-%H%M)-${GITHUB_SHA::7}
          echo "::notice title=Using Artifact Image Tag::$IMAGE_TAG"
          echo "::set-output name=image_tag::$IMAGE_TAG"

      - name: Build, Tag and Push Image to AWS ECR
        env:
          IMAGE_TAG: ${{ steps.create-image-tag.outputs.image_tag }}
        run: |
          set -o pipefail
          ECR_REPO_URL=$(aws ssm get-parameter --name /ecr/deployment-artifacts/smalldomains/domain-manager --with-decryption | jq -r '.Parameter.Value')
          docker build -t $ECR_REPO_URL:$IMAGE_TAG .
          docker push $ECR_REPO_URL:$IMAGE_TAG